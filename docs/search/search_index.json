{
    "docs": [
        {
            "location": "/", 
            "text": "RediSearch-PHP\n\n\nRediSearch-PHP is a PHP client library for the \nRediSearch\n module which adds full-text search to Redis.\n\n\nRequirements\n\n\n\n\nRedis running with the \nRediSearch module loaded\n.\n\n\nPHP \n=7\n\n\nPhpRedis\n, \nPredis\n, or \nphp-redis-client\n.\n\n\n\n\nInstall\n\n\ncomposer install ethanhann/redisearch-php\n\n\n\n\nLoad\n\n\n?php\n\nrequire_once 'vendor/autoload.php';\n\n\n\n\nCreate a Redis Client\n\n\n?php\n\nuse Ehann\\RediSearch\\Redis\\PredisAdapter;\nuse Ehann\\RediSearch\\Redis\\PhpRedisAdapter;\nuse Ehann\\RediSearch\\Redis\\RedisClientAdapter;\n\n$redis = (new PredisAdapter())-\nconnect('127.0.0.1', 6379);\n// or\n$redis = (new PhpRedisAdapter())-\nconnect('127.0.0.1', 6379);\n// or\n$redis = (new RedisClientAdapter())-\nconnect('127.0.0.1', 6379);\n\n\n\n\n\nCreate the Schema\n\n\n?php\n\nuse Ehann\\RediSearch\\Index;\n\n$bookIndex = new Index($redis);\n\n$bookIndex-\naddTextField('title')\n    -\naddTextField('author')\n    -\naddNumericField('price')\n    -\naddNumericField('stock')\n    -\ncreate();\n\n\n\n\nAdd a Document\n\n\n?php\n\n$bookIndex-\nadd([\n    new TextField('title', 'Tale of Two Cities'),\n    new TextField('author', 'Charles Dickens'),\n    new NumericField('price', 9.99),\n    new NumericField('stock', 231),\n]);\n\n\n\n\nSearch the Index\n\n\n?php\n\n$result = $bookIndex-\nsearch('two cities');\n\n$result-\ncount();     // Number of documents.\n$result-\ndocuments(); // Array of matches.\n\n// Documents are returned as objects by default.\n$firstResult = $result-\ndocuments()[0];\n$firstResult-\ntitle;\n$firstResult-\nauthor;", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#redisearch-php", 
            "text": "RediSearch-PHP is a PHP client library for the  RediSearch  module which adds full-text search to Redis.", 
            "title": "RediSearch-PHP"
        }, 
        {
            "location": "/#requirements", 
            "text": "Redis running with the  RediSearch module loaded .  PHP  =7  PhpRedis ,  Predis , or  php-redis-client .", 
            "title": "Requirements"
        }, 
        {
            "location": "/#install", 
            "text": "composer install ethanhann/redisearch-php", 
            "title": "Install"
        }, 
        {
            "location": "/#load", 
            "text": "?php\n\nrequire_once 'vendor/autoload.php';", 
            "title": "Load"
        }, 
        {
            "location": "/#create-a-redis-client", 
            "text": "?php\n\nuse Ehann\\RediSearch\\Redis\\PredisAdapter;\nuse Ehann\\RediSearch\\Redis\\PhpRedisAdapter;\nuse Ehann\\RediSearch\\Redis\\RedisClientAdapter;\n\n$redis = (new PredisAdapter())- connect('127.0.0.1', 6379);\n// or\n$redis = (new PhpRedisAdapter())- connect('127.0.0.1', 6379);\n// or\n$redis = (new RedisClientAdapter())- connect('127.0.0.1', 6379);", 
            "title": "Create a Redis Client"
        }, 
        {
            "location": "/#create-the-schema", 
            "text": "?php\n\nuse Ehann\\RediSearch\\Index;\n\n$bookIndex = new Index($redis);\n\n$bookIndex- addTextField('title')\n    - addTextField('author')\n    - addNumericField('price')\n    - addNumericField('stock')\n    - create();", 
            "title": "Create the Schema"
        }, 
        {
            "location": "/#add-a-document", 
            "text": "?php\n\n$bookIndex- add([\n    new TextField('title', 'Tale of Two Cities'),\n    new TextField('author', 'Charles Dickens'),\n    new NumericField('price', 9.99),\n    new NumericField('stock', 231),\n]);", 
            "title": "Add a Document"
        }, 
        {
            "location": "/#search-the-index", 
            "text": "?php\n\n$result = $bookIndex- search('two cities');\n\n$result- count();     // Number of documents.\n$result- documents(); // Array of matches.\n\n// Documents are returned as objects by default.\n$firstResult = $result- documents()[0];\n$firstResult- title;\n$firstResult- author;", 
            "title": "Search the Index"
        }, 
        {
            "location": "/indexing/", 
            "text": "Indexing\n\n\nField Types\n\n\nThere are three types of fields that can be added to a document: \nTextField\n, \nNumericField\n, and \nGeoField\n.\n\n\nThey are instantiated like this...\n\n\n?php\nnew TextField('author', 'Charles Dickens');\nnew NumericField('price', 9.99);\nnew GeoField('place', new GeoLocation(-77.0366, 38.8977));\n\n\n\n\nFields can also be made with the FieldFactory class...\n\n\n?php\nFieldFactory::make('author', 'Charles Dickens');                 // equal to new TextField('author', 'Charles Dickens');\nFieldFactory::make('price', 9.99);                               // equal to new NumericField('price', 9.99);\nFieldFactory::make('place', new GeoLocation(-77.0366, 38.8977)); // equal to new GeoField('place', new GeoLocation(-77.0366, 38.8977));\n\n\n\n\nAdding Documents\n\n\nAdd an array of field objects...\n\n\n?php\n\n$bookIndex-\nadd([\n    new TextField('title', 'Tale of Two Cities'),\n    new TextField('author', 'Charles Dickens'),\n    new NumericField('price', 9.99),\n    new GeoField('place', new GeoLocation(-77.0366, 38.8977)),\n]);\n\n\n\n\nAdd an associative array...\n\n\n?php\n\n$bookIndex-\nadd([\n    'title' =\n 'Tale of Two Cities',\n    'author' =\n 'Charles Dickens',\n    'price' =\n 9.99,\n    'place' =\n new GeoLocation(-77.0366, 38.8977),\n]);\n\n\n\n\nCreate a document with the index's makeDocument method, then set field values...\n\n\n?php\n\n$document = $bookIndex-\nmakeDocument();\n$document-\ntitle-\nsetValue('How to be awesome.');\n$document-\nauthor-\nsetValue('Jack');\n$document-\nprice-\nsetValue(9.99);\n$document-\nplace-\nsetValue(new GeoLocation(-77.0366, 38.8977));\n\n$this-\nadd($document);\n\n\n\n\nDocBlocks can (optionally) be used to type hint field property names... \n\n\n?php\n\n/** @var BookDocument $document */\n$document = $bookIndex-\nmakeDocument();\n\n// \ntitle\n will auto-complete correctly in your IDE provided BookDocument has a \ntitle\n property or @property annotation.\n$document-\ntitle-\nsetValue('How to be awesome.');\n\n$this-\nadd($document);\n\n\n\n\n?php\n\nnamespace Your\\Documents;\n\nuse Ehann\\RediSearch\\Document\\Document;\nuse Ehann\\RediSearch\\Fields\\NumericField;\nuse Ehann\\RediSearch\\Fields\\TextField;\n\n/**\n * @property TextField title\n * @property TextField author\n * @property NumericField price\n * @property GeoField place\n */\nclass BookDocument extends Document\n{\n}\n\n\n\n\nUpdating a Document\n\n\nDocuments are updated with an index's replace method.\n\n\n?php\n// Make a document.\n$document = $bookIndex-\nmakeDocument();\n$document-\ntitle-\nsetValue('How to be awesome.');\n$document-\nauthor-\nsetValue('Jack');\n$document-\nprice-\nsetValue(9.99);\n$document-\nplace-\nsetValue(new GeoLocation(-77.0366, 38.8977));\n$bookIndex-\nadd($document);\n\n// Update a couple fields\n$document-\ntitle-\nsetValue('How to be awesome: Part 2.');\n$document-\nprice-\nsetValue(19.99);\n\n// Update the document.\n$bookIndex-\nreplace($document);\n\n\n\n\nA document can also be updating when its ID is specified...\n\n\n?php\n// Make a document.\n$document = $bookIndex-\nmakeDocument();\n$document-\ntitle-\nsetValue('How to be awesome.');\n$document-\nauthor-\nsetValue('Jack');\n$document-\nprice-\nsetValue(9.99);\n$document-\nplace-\nsetValue(new GeoLocation(-77.0366, 38.8977));\n$bookIndex-\nadd($document);\n\n// Create a new document and assign the old document's ID to it.\n$newDocument = $bookIndex-\nmakeDocument($document-\ngetId());\n\n// Set a couple fields.\n$document-\ntitle-\nsetValue('');\n$document-\nauthor-\nsetValue('Jack');\n$newDocument-\ntitle-\nsetValue('How to be awesome: Part 2.');\n$newDocument-\nprice-\nsetValue(19.99);\n\n// Update the document.\n$bookIndex-\nreplace($newDocument);\n\n\n\n\nBatch Indexing\n\n\nBatch indexing is possible with the \naddMany\n method.\nTo index an external collection, make sure to set the document's ID to the ID of the record in the external collection.\n\n\n?php\n\n// Get a record set from your DB (or some other datastore)...\n$records = $someDatabase-\nfindAll();\n\n$documents = [];\nforeach ($records as $record) {\n    // Make a new document with the external record's ID.\n    $newDocument = $bookIndex-\nmakeDocument($record-\nid);\n    $newDocument-\ntitle-\nsetValue($record-\ntitle);\n    $newDocument-\nauthor-\nsetValue($record-\nauthor);\n    $documents[] = $newDocument; \n}\n\n// Add all the documents at once.\n$bookIndex-\naddMany($documents);\n\n// It is possible to increase indexing speed by disabling atomicity by passing true as the second parameter.\n// Note that this is only possible when using the phpredis extension.\n$bookIndex-\naddMany($documents, true);", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#indexing", 
            "text": "", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#field-types", 
            "text": "There are three types of fields that can be added to a document:  TextField ,  NumericField , and  GeoField .  They are instantiated like this...  ?php\nnew TextField('author', 'Charles Dickens');\nnew NumericField('price', 9.99);\nnew GeoField('place', new GeoLocation(-77.0366, 38.8977));  Fields can also be made with the FieldFactory class...  ?php\nFieldFactory::make('author', 'Charles Dickens');                 // equal to new TextField('author', 'Charles Dickens');\nFieldFactory::make('price', 9.99);                               // equal to new NumericField('price', 9.99);\nFieldFactory::make('place', new GeoLocation(-77.0366, 38.8977)); // equal to new GeoField('place', new GeoLocation(-77.0366, 38.8977));", 
            "title": "Field Types"
        }, 
        {
            "location": "/indexing/#adding-documents", 
            "text": "Add an array of field objects...  ?php\n\n$bookIndex- add([\n    new TextField('title', 'Tale of Two Cities'),\n    new TextField('author', 'Charles Dickens'),\n    new NumericField('price', 9.99),\n    new GeoField('place', new GeoLocation(-77.0366, 38.8977)),\n]);  Add an associative array...  ?php\n\n$bookIndex- add([\n    'title' =  'Tale of Two Cities',\n    'author' =  'Charles Dickens',\n    'price' =  9.99,\n    'place' =  new GeoLocation(-77.0366, 38.8977),\n]);  Create a document with the index's makeDocument method, then set field values...  ?php\n\n$document = $bookIndex- makeDocument();\n$document- title- setValue('How to be awesome.');\n$document- author- setValue('Jack');\n$document- price- setValue(9.99);\n$document- place- setValue(new GeoLocation(-77.0366, 38.8977));\n\n$this- add($document);  DocBlocks can (optionally) be used to type hint field property names...   ?php\n\n/** @var BookDocument $document */\n$document = $bookIndex- makeDocument();\n\n//  title  will auto-complete correctly in your IDE provided BookDocument has a  title  property or @property annotation.\n$document- title- setValue('How to be awesome.');\n\n$this- add($document);  ?php\n\nnamespace Your\\Documents;\n\nuse Ehann\\RediSearch\\Document\\Document;\nuse Ehann\\RediSearch\\Fields\\NumericField;\nuse Ehann\\RediSearch\\Fields\\TextField;\n\n/**\n * @property TextField title\n * @property TextField author\n * @property NumericField price\n * @property GeoField place\n */\nclass BookDocument extends Document\n{\n}", 
            "title": "Adding Documents"
        }, 
        {
            "location": "/indexing/#updating-a-document", 
            "text": "Documents are updated with an index's replace method.  ?php\n// Make a document.\n$document = $bookIndex- makeDocument();\n$document- title- setValue('How to be awesome.');\n$document- author- setValue('Jack');\n$document- price- setValue(9.99);\n$document- place- setValue(new GeoLocation(-77.0366, 38.8977));\n$bookIndex- add($document);\n\n// Update a couple fields\n$document- title- setValue('How to be awesome: Part 2.');\n$document- price- setValue(19.99);\n\n// Update the document.\n$bookIndex- replace($document);  A document can also be updating when its ID is specified...  ?php\n// Make a document.\n$document = $bookIndex- makeDocument();\n$document- title- setValue('How to be awesome.');\n$document- author- setValue('Jack');\n$document- price- setValue(9.99);\n$document- place- setValue(new GeoLocation(-77.0366, 38.8977));\n$bookIndex- add($document);\n\n// Create a new document and assign the old document's ID to it.\n$newDocument = $bookIndex- makeDocument($document- getId());\n\n// Set a couple fields.\n$document- title- setValue('');\n$document- author- setValue('Jack');\n$newDocument- title- setValue('How to be awesome: Part 2.');\n$newDocument- price- setValue(19.99);\n\n// Update the document.\n$bookIndex- replace($newDocument);", 
            "title": "Updating a Document"
        }, 
        {
            "location": "/indexing/#batch-indexing", 
            "text": "Batch indexing is possible with the  addMany  method.\nTo index an external collection, make sure to set the document's ID to the ID of the record in the external collection.  ?php\n\n// Get a record set from your DB (or some other datastore)...\n$records = $someDatabase- findAll();\n\n$documents = [];\nforeach ($records as $record) {\n    // Make a new document with the external record's ID.\n    $newDocument = $bookIndex- makeDocument($record- id);\n    $newDocument- title- setValue($record- title);\n    $newDocument- author- setValue($record- author);\n    $documents[] = $newDocument; \n}\n\n// Add all the documents at once.\n$bookIndex- addMany($documents);\n\n// It is possible to increase indexing speed by disabling atomicity by passing true as the second parameter.\n// Note that this is only possible when using the phpredis extension.\n$bookIndex- addMany($documents, true);", 
            "title": "Batch Indexing"
        }, 
        {
            "location": "/searching/", 
            "text": "Searching\n\n\nSimple Text Search\n\n\nText fields can be filtered with the index's search method.\n\n\n?php\n\n$result = $bookIndex-\nsearch('two cities');\n\n$result-\ncount();     // Number of documents.\n$result-\ndocuments(); // Array of stdObjects.\n\n\n\n\nDocuments can also be returned as arrays instead of objects by passing true as the second parameter to the search method.\n\n\n?php\n\n$result = $bookIndex-\nsearch('two cities', true);\n\n$result-\ndocuments(); // Array of arrays.\n\n\n\n\nFiltering Numeric Fields\n\n\nNumeric fields can be filtered with the index's filter method.\n\n\n?php\n\n$result = $bookIndex\n    -\nfilter('price', 4.99, 19.99)\n    -\nsearch('two cities');\n\n\n\n\nFiltering Geo Fields\n\n\nNumeric fields can be filtered with the index's filter method.\n\n\n?php\n\n$result = $bookIndex\n    -\nfilter('price', 4.99, 19.99)\n    -\nsearch('two cities');\n\n\n\n\nSorting Results\n\n\nSearch results can be sorted with the index's sort method.\n\n\n?php\n\n$result = $bookIndex\n    -\nsortBy('price')\n    -\nsearch('two cities');\n\n\n\n\nSetting a Language\n\n\nA supported language can be specified when running a query.\nSupported languages are represented as constants in the \nEhann\\RediSearch\\Language\n class.  \n\n\n?php\n\n$result = $bookIndex\n    -\nlanguage(Language::ITALIAN)\n    -\nsearch('two cities');\n\n\n\n\nExplaining a Query\n\n\nAn explanation for a query can be generated with the index's explain method.\n\n\nThis can be helpful for understanding why a query is returning a set of results.\n\n\n?php\n\n$result = $bookIndex\n    -\nfilter('price', 4.99, 19.99)\n    -\nsortBy('price')\n    -\nexplain('two cities');\n\n\n\n\nLogging Queries\n\n\nLogging is optional. It can be enabled by injecting a PSR compliant logger, such as Monolog, into a RedisClient instance.\n\n\nInstall Monolog...\n\n\ncomposer require monolog/monolog\n\n\n\n\nInject a logger instance (with a stream handler in this example)...\n\n\n?php\n$logger = new Logger('Ehann\\RediSearch');\n$logger-\npushHandler(new StreamHandler('MyLogFile.log', Logger::DEBUG));\n$this-\nredisClient-\nsetLogger($logger);", 
            "title": "Searching"
        }, 
        {
            "location": "/searching/#searching", 
            "text": "", 
            "title": "Searching"
        }, 
        {
            "location": "/searching/#simple-text-search", 
            "text": "Text fields can be filtered with the index's search method.  ?php\n\n$result = $bookIndex- search('two cities');\n\n$result- count();     // Number of documents.\n$result- documents(); // Array of stdObjects.  Documents can also be returned as arrays instead of objects by passing true as the second parameter to the search method.  ?php\n\n$result = $bookIndex- search('two cities', true);\n\n$result- documents(); // Array of arrays.", 
            "title": "Simple Text Search"
        }, 
        {
            "location": "/searching/#filtering-numeric-fields", 
            "text": "Numeric fields can be filtered with the index's filter method.  ?php\n\n$result = $bookIndex\n    - filter('price', 4.99, 19.99)\n    - search('two cities');", 
            "title": "Filtering Numeric Fields"
        }, 
        {
            "location": "/searching/#filtering-geo-fields", 
            "text": "Numeric fields can be filtered with the index's filter method.  ?php\n\n$result = $bookIndex\n    - filter('price', 4.99, 19.99)\n    - search('two cities');", 
            "title": "Filtering Geo Fields"
        }, 
        {
            "location": "/searching/#sorting-results", 
            "text": "Search results can be sorted with the index's sort method.  ?php\n\n$result = $bookIndex\n    - sortBy('price')\n    - search('two cities');", 
            "title": "Sorting Results"
        }, 
        {
            "location": "/searching/#setting-a-language", 
            "text": "A supported language can be specified when running a query.\nSupported languages are represented as constants in the  Ehann\\RediSearch\\Language  class.    ?php\n\n$result = $bookIndex\n    - language(Language::ITALIAN)\n    - search('two cities');", 
            "title": "Setting a Language"
        }, 
        {
            "location": "/searching/#explaining-a-query", 
            "text": "An explanation for a query can be generated with the index's explain method.  This can be helpful for understanding why a query is returning a set of results.  ?php\n\n$result = $bookIndex\n    - filter('price', 4.99, 19.99)\n    - sortBy('price')\n    - explain('two cities');", 
            "title": "Explaining a Query"
        }, 
        {
            "location": "/searching/#logging-queries", 
            "text": "Logging is optional. It can be enabled by injecting a PSR compliant logger, such as Monolog, into a RedisClient instance.  Install Monolog...  composer require monolog/monolog  Inject a logger instance (with a stream handler in this example)...  ?php\n$logger = new Logger('Ehann\\RediSearch');\n$logger- pushHandler(new StreamHandler('MyLogFile.log', Logger::DEBUG));\n$this- redisClient- setLogger($logger);", 
            "title": "Logging Queries"
        }, 
        {
            "location": "/suggesting/", 
            "text": "Suggesting\n\n\nCreating a Suggestion Index\n\n\nCreate a suggestion index called \"MySuggestions\"...\n\n\n?php\n\nuse Ehann\\RediSearch\\Suggestion;\n\n$suggestion = new Suggestion($redisClient, 'MySuggestions');\n\n\n\n\n\nAdding a Suggestion\n\n\nAdd a suggestion with a score...\n\n\n?php\n\n$suggestion-\nadd('Tale of Two Cities', 1.10);\n\n\n\n\nGetting a Suggestion\n\n\nPass a partial string to the get method... \n\n\n?php\n\n$result = $suggestion-\nget('Cities');\n\n\n\n\nGetting a Suggestion\n\n\nPass the entire suggestion string to the delete method... \n\n\n?php\n\n$result = $suggestion-\ndelete('Tale of Two Cities');\n\n\n\n\nGetting the Number of Possible Suggestions\n\n\nSimply use the suggestion index's length method... \n\n\n?php\n\n$numberOfPossibleSuggestions = $suggestion-\nlength();", 
            "title": "Suggesting"
        }, 
        {
            "location": "/suggesting/#suggesting", 
            "text": "", 
            "title": "Suggesting"
        }, 
        {
            "location": "/suggesting/#creating-a-suggestion-index", 
            "text": "Create a suggestion index called \"MySuggestions\"...  ?php\n\nuse Ehann\\RediSearch\\Suggestion;\n\n$suggestion = new Suggestion($redisClient, 'MySuggestions');", 
            "title": "Creating a Suggestion Index"
        }, 
        {
            "location": "/suggesting/#adding-a-suggestion", 
            "text": "Add a suggestion with a score...  ?php\n\n$suggestion- add('Tale of Two Cities', 1.10);", 
            "title": "Adding a Suggestion"
        }, 
        {
            "location": "/suggesting/#getting-a-suggestion", 
            "text": "Pass a partial string to the get method...   ?php\n\n$result = $suggestion- get('Cities');", 
            "title": "Getting a Suggestion"
        }, 
        {
            "location": "/suggesting/#getting-a-suggestion_1", 
            "text": "Pass the entire suggestion string to the delete method...   ?php\n\n$result = $suggestion- delete('Tale of Two Cities');", 
            "title": "Getting a Suggestion"
        }, 
        {
            "location": "/suggesting/#getting-the-number-of-possible-suggestions", 
            "text": "Simply use the suggestion index's length method...   ?php\n\n$numberOfPossibleSuggestions = $suggestion- length();", 
            "title": "Getting the Number of Possible Suggestions"
        }, 
        {
            "location": "/changelog/", 
            "text": "Changelog\n\n\n0.10.0\n\n\nChanges since last release\n\n\n\n\nRemove RedisClient class and add adapter functionality.\n\n\nThere are now adapters for Predis, PhpRedis, and the Cheprasov client. They all extend \nAbstractRedisClient\n which implements \nRedisClientInterface\n. An additional adapter can be created by extending AbstractRedisClient or by implementing RedisClientInterface if needed for some reason. \n\n\nHandle RediSearch module error when index is created on a Redis database other than 0.\n\n\nReturn boolean true instead of \"OK\" when using PredisAdapter.\n\n\nA new index now requires that a redis client is passed into its constructor - removed the magic behavior where a default RedisClient instance was auto initialized.\n\n\n\n\n0.9.0\n\n\nChanges since last release\n\n\n\n\nAn exception is now thrown when the RediSearch module is not loaded in Redis.\n\n\nAllow a \nlanguage to be specified\n when searching.\n\n\n\n\n0.8.0\n\n\nChanges since last release\n\n\n\n\nAdd \nsearch result sorting\n.\n\n\nRemove NoScoreIdx and Optimize methods as they are deprecated and/or non-functional in RediSearch.\n\n\nAdd \nexplain method\n for explaining a query.\n\n\nAdd optional \nquery logging\n.\n\n\nAdd \nsuggestions\n.\n\n\n\n\n0.7.0\n\n\nChanges since last release\n\n\n\n\nMany bug fixes and code quality improvements.\n\n\n\n\n0.6.0\n\n\nChanges since last release\n\n\n\n\nAdd \nbatch indexing\n.\n\n\n\n\n0.5.0\n\n\n\n\nRename vendor namespace from \nEeh\n to \nEhann\n\n\nAbstractIndex\n was renamed to \nIndex\n and is no longer abstract.\n\n\nCustom document ID is now properly set when adding to an index.", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#0100", 
            "text": "Changes since last release   Remove RedisClient class and add adapter functionality.  There are now adapters for Predis, PhpRedis, and the Cheprasov client. They all extend  AbstractRedisClient  which implements  RedisClientInterface . An additional adapter can be created by extending AbstractRedisClient or by implementing RedisClientInterface if needed for some reason.   Handle RediSearch module error when index is created on a Redis database other than 0.  Return boolean true instead of \"OK\" when using PredisAdapter.  A new index now requires that a redis client is passed into its constructor - removed the magic behavior where a default RedisClient instance was auto initialized.", 
            "title": "0.10.0"
        }, 
        {
            "location": "/changelog/#090", 
            "text": "Changes since last release   An exception is now thrown when the RediSearch module is not loaded in Redis.  Allow a  language to be specified  when searching.", 
            "title": "0.9.0"
        }, 
        {
            "location": "/changelog/#080", 
            "text": "Changes since last release   Add  search result sorting .  Remove NoScoreIdx and Optimize methods as they are deprecated and/or non-functional in RediSearch.  Add  explain method  for explaining a query.  Add optional  query logging .  Add  suggestions .", 
            "title": "0.8.0"
        }, 
        {
            "location": "/changelog/#070", 
            "text": "Changes since last release   Many bug fixes and code quality improvements.", 
            "title": "0.7.0"
        }, 
        {
            "location": "/changelog/#060", 
            "text": "Changes since last release   Add  batch indexing .", 
            "title": "0.6.0"
        }, 
        {
            "location": "/changelog/#050", 
            "text": "Rename vendor namespace from  Eeh  to  Ehann  AbstractIndex  was renamed to  Index  and is no longer abstract.  Custom document ID is now properly set when adding to an index.", 
            "title": "0.5.0"
        }
    ]
}